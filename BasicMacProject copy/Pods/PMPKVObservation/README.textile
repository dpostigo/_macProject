h1. PMPKVObservation - Yet Another KVO-improvement project

h2. Synopsis

p. Include PMPKVObservation.m and .h in your project

bc.. #import "PMPKVObservation.h"

@interface PMPKVOTests ()
@property (retain) PMPKVObservation * anObservation;
@property (retain) NSMutableArray * multipleObservations;
@end

@implementation PMPKVOTests

- (void)blockObservation
{
    self.anObservation = [PMPKVObservation observe:anObjectToObserve
                                           keyPath:@"observeMe"
                                           options:0
                                          callback:^(PMPKVObservation *observation, NSDictionary *changeDictionary) {
                                              NSLog(@"observation fired for object: %@ keyPath: %@ changes: %@",
                                                  observation.observedObject,
                                                  observation.keyPath,
                                                  changes);
                                          }];
                                          
    self.multipleObservations = [PMPKVObservation observe:anObjectToObserve
                                      forMultipleKeyPaths:@[@"observeMe2", @"observeMe3"]
                                                  options:0
                                             callback:^(PMPKVObservation *observation, NSDictionary *changeDictionary) {
                                                 NSLog(@"observation fired for object: %@ keyPath: %@ changes: %@",
                                                     observation.observedObject,
                                                     observation.keyPath,
                                                     changes);
                                             }];

}

@end

p. The options and change dictionary are as per normal KVO. You need to be wary of the block causing retain cycles of self as usual.

p. Unlike MAKVONotificationCenter and others, you are responsible for managing the lifecycle of the kvo object - when it is dealloc-ed the observation will be removed. Like MAKVONotificationCenter, a minimum of magic is used to swizzle the dealloc method of the observed object and remove the observation if it still exists (tracked via an associated NSHashTable). If for some reason you want to find out if the kvo object you hold has been released early you can check the @isValid@ accessor (which you can observe with KVO).

h2. Caveats

# While I am using this in a client project, that project has not yet shipped so I can't promise wide-spread testing. Take a look at the tests in the test app and if you are using scenarios that you don't thing are tested pull requests are welcome!
# It now requires ARC. It is most tested under MacOS 10.8 but supports 10.7 and up and iOS 5 and up (there are test apps for both MacOS 10.7 and iOS 5).

h2. Background

p. If you're reading this then you're probably as frustrated by seemingly random KVO crashes and/or the pain of huge if/else blocks in your observers. I've never been happy with the other KVO-improvement classes I've seen, and never having had any bright insights myself I kept doing things the normal way. This becomes especially painful with things like view based NSTableViews when you are re-using objects and so need to observe a new object, being very careful to un-observe the prior object (unless it's been released, which you need to either track yourself if you can, or retain it, which has its own problems).

p. It was clear that the dealloc swizzling approach of Mike Ash's "MAKVONotificationCenter":https://github.com/mikeash/MAKVONotificationCenter was unavoidable, but I didn't like the complexity. Recently Gwynne Raskind posted a "somewhat updated MAKVONotificationCenter":http://www.mikeash.com/pyblog/friday-qa-2012-03-02-key-value-observing-done-right-take-2.html which sparked some discussion, including a comment discussing "SPKVONotificationCenter":https://github.com/nevyn/SPSuccinct/blob/master/SPSuccinct/SPKVONotificationCenter.m by Joachim Bengtsson. Joachim's brainwave was that observations should be modelled as standalone objects and simply managing the lifecycle of that object appropriately should remove the observation. Clean and simple.

p. Except it's not quite that simple because you still need to swizzle the dealloc of the observed object since it can go away at any time. And as much as I love a good macro as much as the next hacker, Joachim's @$depends()@ macro looks about as much fun as a "turing complete makefile":http://okmij.org/ftp/Computation/Make-functional.txt .

p. Enter PMPKVObservation!

h2. Changelog

* v0.1 : first version tag created for CocoaPods user happiness
* v0.2 : Now requires ARC, and consequently the target/action API was removed in favour of the block based API.

h2. Author

p. Mark Aufflick ("mark@aufflick.com":mailto:mark@aufflick.com)
"http://mark.aufflick.com":http://mark.aufflick.com
"http://pumptheory.com":http://pumptheory.com
